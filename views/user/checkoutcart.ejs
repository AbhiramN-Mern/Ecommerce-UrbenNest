<%- include("../../views/partials/user/header", { currentPage: 'checkout' }) %>

<section>
  <div class="container">
    <div class="row">
      <div class="col-md-12">
        <div class="order_review">
          <div class="mb-20">
            <h4>Products</h4>
          </div>
          <div class="table-responsive order_table text-center">
            <table>
              <thead>
                <tr>
                  <th>Image</th>
                  <th>Product</th>
                  <th>Quantity</th>
                  <th>Total</th>
                  <th>Delete</th>
                </tr>
              </thead>
              <tbody>
                <% if (product && Array.isArray(product) && product.length > 0) { %>
                  <% for (let i = 0; i < product.length; i++) { %>
                    <tr>
                      <td class="image product-thumbnail">
                        <img src="/uploads/re-image/<%= product[i].productDetails[0].productImage[0] %>" alt="#">
                      </td>
                      <td>
                        <h5>
                          <a href="shop-product-full.html">
                            <%= product[i].productDetails[0].productName %>
                          </a>
                        </h5>
                      </td>
                      <td>
                        <%= product[i].quantity %>
                      </td>
                      <td>
                        <%= product[i].productDetails[0].salePrice * product[i].quantity %>
                      </td>
                      <td class="action" data-title="Remove">
                        <a class="btn btn-sm" href="/deleteItem?id=<%= product[i].productDetails[0]._id %>">
                          <i class="fi-rs-trash"></i>
                        </a>
                      </td>
                    </tr>
                  <% } %>
                <% } else { %>
                  <tr>
                    <td colspan="5">No products found</td>
                  </tr>
                <% } %>
              </tbody>
            </table>
          </div>
        </div>
      </div>

      <div class="col-8">
        <div class="row align-items-start mt-10 ml-190">
          <% if (locals.userAddress) { %>
            <% userAddress.address.forEach((address) => { %>
              <div class="col-lg-6">
                <div class="card">
                  <div class="form-check">
                    <input class="form-check-input" type="radio" id="addressRadio<%= address._id %>" name="selectedAddress" value="<%= address._id %>">
                    <label class="form-check-label" for="addressRadio<%= address._id %>">Select Address</label>
                  </div>
                  <div class="card-header">
                    <h5 class="mb-0">
                      <%= address.addressType %>
                    </h5>
                  </div>
                  <div class="card-body">
                    <address>
                      <%= address.name %><br />
                      <%= address.city %>,<br />
                      <%= address.landMark %> <br />
                      <%= address.state %>
                    </address>
                    <p><%= address.pincode %></p>
                    <p><%= address.phone %></p>
                    <p><%= address.altPhone %></p>
                    <div class="d-flex justify-content-between gap-2">
                      <a href="/editAddress?id=<%= address._id %>&redirect=/checkout&userId=<%= user._id %>" 
                         class="btn btn-outline-primary btn-sm d-flex align-items-center">
                        <i class="material-icons me-1" style="font-size: 16px;">edit</i>
                        Edit
                      </a>
                      <button onclick="confirmDeleteAddress('<%= address._id %>', '<%= user._id %>')" 
                              class="btn btn-danger btn-sm d-flex align-items-center">
                        <i class="material-icons me-1" style="font-size: 16px;">delete</i>
                        Delete
                      </button>
                    </div>
                  </div>
                </div>
              </div>
            <% }) %>
          <% } else { %>
            <div class="col-lg-6 mb-3">
              <div class="card">
                <div class="card-header">
                  <h5 class="mb-0"></h5>
                </div>
                <div class="card-body">
                  <address>No address</address>
                </div>
              </div>
            </div>
          <% } %>
          <div class="col-lg-6 mb-3">
            <a href="/addAddress?redirect=/checkout&userId=<%= user._id %>">
              <button class="btn btn-primary w-100">Add address</button>
            </a>
          </div>
        </div>
      </div>


      
      <div class="coupon-section" style="border:1px solid #ddd; padding:15px; margin-bottom:20px;">
        <h4>Have a Coupon?</h4>
        <input type="text" id="couponCode" placeholder="Enter coupon code" style="width:60%; padding:5px;">
        <button class="btn btn-primary" onclick="applyCoupon()">Apply Coupon</button>
      </div>

      <div class="available-coupons" style="border:1px solid #ddd; padding:15px; margin-bottom:20px;">
        <h4>Available Coupons</h4>
        <div id="coupon-list">
          <!-- Coupon list will be injected here -->
        </div>
      </div>

      <!-- Display applied coupon discount if any -->
      <div id="coupon-discount" style="font-weight:bold; color:green; margin-bottom:10px; display:none;">
        Coupon Discount: ₹<span id="discountAmount">0</span>
      </div>

      <!-- Hidden field to hold coupon discount value -->
      <input type="hidden" id="discount" name="discount" value="0">

      <div class="coupon-summary" style="margin-bottom: 15px;">
        <p>Coupon Discount: <span id="coupon-discount-display">₹0</span></p>
      </div>

      <div class="payment_method">
        <div class="mb-25 ml-150">
          <h5>Payment</h5>
        </div>
        <div class="custom-radio ml-150">
          <input class="form-check-input payment" type="radio" value="cod" name="payment_option" id="CashOnDelivery" checked="">
          <label class="form-check-label" for="CashOnDelivery">Cash on Delivery</label>
        </div>

        <div class="custom-radio ml-150">
          <input class="form-check-input payment" type="radio" value="Razorpay" name="payment_option" id="Razorpay" checked="">
          <label class="form-check-label" for="Razorpay">Razorpay</label>
        </div>
      </div>  

      <div class="container col-6 mt-3">
        <div class="ml-150">
          <table class="table mt-45">
            <tbody>
              <% if (product && product.length > 0) { %>
                <tr>
                  <th>Shipping</th>
                  <td colspan="2">
                    <% if (deliveryCharge > 0) { %>
                      ₹<%= deliveryCharge %>
                    <% } else { %>
                      <em>Free Shipping</em>
                    <% } %>
                  </td>
                </tr>
              <% } %>
              <tr>
                <th>Coupon Discount</th>
                <td colspan="2">
                  <span id="coupon-discount-display">₹0</span>
                </td>
              </tr>
              <tr>
                <th>Total</th>
                <td colspan="2" class="product-subtotal">
                  <span class="font-xl text-brand fw-900" id="totalValue">
                    ₹<%= totalWithDelivery %>
                  </span>
                </td>
              </tr>
            </tbody>
          </table>

          <div class="ml-65">
            <button type="button" class="btn" onclick="placeOrder('<%= user._id %>')">Place Order</button>
          </div>
        </div>
      </div>
    </div>
  </div>
</section>

<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

<script>
 async function placeOrder(userId) {
    try {
      let address = $("input[name='selectedAddress']:checked").val();
      let payment = $("input[name='payment_option']:checked").val();

      const sum = document.getElementById("totalValue").textContent;
      const numericValue = parseInt(sum.replace(/[^\d.]/g, ''));

      // Validation checks
      if (!payment) {
        return Swal.fire({
          title: 'NO PAYMENT FOUND!',
          text: 'Please select your Payment.',
          icon: 'error',
          timer: 3000,
        });
      }

      if (!address) {
        return Swal.fire({
          title: 'NO ADDRESS FOUND!',
          text: 'Please select your address.',
          icon: 'error',
          timer: 3000,
        });
      }

      // COD Payment Flow
      if (payment === 'cod') {
        const response = await handleCodPayment(userId, address, payment, numericValue);
        handleOrderResponse(response);
      } 
      // Razorpay Payment Flow
      else if (payment === 'Razorpay') {
        await handleRazorpayPayment(userId, address, numericValue);
      }
    } catch (error) {
      console.error('Order placement error:', error);
      Swal.fire({
        title: 'Error',
        text: 'There was an error processing your order',
        icon: 'error',
        timer: 3000
      });
    }
  }

  // Handle COD Payment
  async function handleCodPayment(userId, address, payment, amount) {
    const response = await $.ajax({
      url: '/orderPlaced',
      method: 'POST',
      data: {
        totalPrice: amount,
        addressId: address,
        payment: payment,
      },
      error: function(xhr) {
        throw new Error(xhr.responseJSON?.error || 'Failed to place COD order');
      }
    });
    return response;
  }

  // Handle Razorpay Payment
  async function handleRazorpayPayment(userId, address, amount) {
    try {
      // Step 1: Create Razorpay Order
      const razorpayOrder = await $.ajax({
        url: '/create-razorpay-order',
        method: 'POST',
        data: { amount: amount },
        error: function(xhr) {
          throw new Error(xhr.responseJSON?.message || 'Failed to create Razorpay order');
        }
      });

      // Step 2: Open Razorpay Checkout
      const options = {
        key: "<%= process.env.RAZORPAY_KEY_ID %>",
        amount: razorpayOrder.order.amount,
        currency: "INR",
        name: "UrbenNest",
        description: "Payment for your order",
        order_id: razorpayOrder.order.id,
        handler: async function(response) {
          try {
            // Step 3: Verify Payment and Place Order
            const orderResponse = await $.ajax({
              url: '/orderPlaced',
              method: 'POST',
              data: {
                totalPrice: amount,
                addressId: address,
                payment: 'Razorpay',
                razorpayPaymentId: response.razorpay_payment_id,
                razorpayOrderId: response.razorpay_order_id,
                razorpaySignature: response.razorpay_signature,
              },
              error: function(xhr) {
                throw new Error(xhr.responseJSON?.error || 'Payment verification failed');
              }
            });

            // Step 4: Handle Successful Order
            handleOrderResponse(orderResponse);
          } catch (error) {
            console.error('Payment verification error:', error);
            Swal.fire({
              title: 'Payment Error',
              text: error.message || 'Payment was successful but order placement failed',
              icon: 'error',
              timer: 5000
            });
          }
        },
        prefill: {
          name: "<%= user.name %>",
          email: "<%= user.email %>",
          contact: "<%= user.phone || '9999999999' %>"
        },
        theme: {
          color: "#3399cc"
        },
        modal: {
          ondismiss: function() {
            Swal.fire({
              title: 'Payment Cancelled',
              text: 'You cancelled the payment process',
              icon: 'info',
              timer: 3000
            });
          }
        }
      };

      const rzp = new Razorpay(options);
      rzp.open();
    } catch (error) {
      console.error('Razorpay initialization error:', error);
      Swal.fire({
        title: 'Payment Error',
        text: error.message || 'Failed to initialize payment gateway',
        icon: 'error',
        timer: 3000
      });
    }
  }

  // Handle Order Response (common for both payment methods)
  function handleOrderResponse(response) {
    if (response.error === "Some items are out of stock") {
      return Swal.fire({
        title: 'Out of Stock!',
        text: response.messages.join('\n'),
        icon: 'error',
        timer: 5000,
      });
    }

    let orderId = response.order._id;
    Swal.fire({
      title: "Order Successful",
      text: "Your order has been placed successfully",
      icon: "success",
      showCancelButton: true,
      confirmButtonText: "View Order Details",
      cancelButtonText: "Continue Shopping",
      allowOutsideClick: false
    }).then((result) => {
      if (result.isConfirmed) {
        window.location.href = `/orderDetails?id=${orderId}`;
      } else {
        window.location.href = '/';
      }
    });
  }

  // Address deletion function
  function confirmDeleteAddress(addressId, userId) {
    Swal.fire({
      title: 'Are you sure?',
      text: 'You will not be able to recover this address!',
      icon: 'warning',
      showCancelButton: true,
      confirmButtonText: 'Yes, delete it!',
      cancelButtonText: 'No, keep it'
    }).then((result) => {
      if (result.isConfirmed) {
        window.location.href = `/deleteAddress?id=${addressId}&redirect=/checkout&userId=${userId}`;
      }
    });
  }
  function confirmDeleteAddress(addressId, userId) {
    Swal.fire({
      title: 'Are you sure?',
      text: 'You will not be able to recover this address!',
      icon: 'warning',
      showCancelButton: true,
      confirmButtonText: 'Yes, delete it!',
      cancelButtonText: 'No, keep it'
    }).then((result) => {
      if (result.isConfirmed) {
        window.location.href = `/deleteAddress?id=${addressId}&redirect=/checkout&userId=${userId}`;
      }
    });
  }

  async function cancelOrder(orderId, productId) {
    const reason = prompt("Enter cancellation reason:");

    if (!reason) return;

    try {
      const res = await fetch('/cancelOrder', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          orderId,
          productId,
          reason
        })
      });

      const data = await res.json();
      if (data.success) {
        alert('Order cancelled successfully!');
        location.reload(); // Refresh to reflect change
      } else {
        alert(data.message || 'Failed to cancel the order.');
      }
    } catch (err) {
      console.error(err);
      alert('Something went wrong while cancelling the order.');
    }
  }

  async function applyCoupon() {
    const rawTotal = $("#totalValue").text();
    // Remove non-numeric characters (like ₹) from the total
    const totalNumeric = rawTotal.replace(/[^\d.]/g, '');
    const couponCode = document.getElementById('couponCode').value.trim();
    if (!couponCode) {
      Swal.fire({
        title: 'No Coupon Entered',
        text: 'Please enter a coupon code.',
        icon: 'error',
        timer: 2000,
      });
      return;
    }

    try {
      const response = await $.ajax({
        url: '/applyCoupon',
        method: 'POST',
        data: { coupon: couponCode, total: totalNumeric },
        error: function(xhr) {
          throw new Error(xhr.responseJSON?.message || 'Failed to apply coupon');
        }
      });

      if (response.success) {
        Swal.fire({
          icon: 'success',
          title: 'Coupon Applied!',
          text: `Discount: ₹${response.offerPrice}`,
          timer: 1500
        }).then(() => {
          // Update the coupon discount display in the UI
          $("#coupon-discount-display").text("₹" + response.offerPrice);
          // Also update hidden input field that is sent with the order
          $("#discount").val(response.offerPrice);
          // Update the total payable amount in the UI as returned by the server
          $("#totalValue").text("₹" + response.gt);
        });
      } else {
        Swal.fire({
          icon: 'error',
          title: 'Coupon Error',
          text: response.message || 'Failed to apply coupon',
          timer: 3000
        });
      }
    } catch (error) {
      console.error(error);
      Swal.fire({
        icon: 'error',
        title: 'Error',
        text: error.message || 'Failed to apply coupon',
        timer: 3000
      });
    }
  }

  async function fetchCoupons() {
    try {
      const coupons = await $.ajax({
        url: '/getCoupons',
        method: 'GET',
        error: function(xhr) {
          console.error("Failed to fetch coupons");
        }
      });

      let html = '';
      if (coupons && coupons.length > 0) {
        coupons.forEach(coupon => {
          html += `<div class="coupon-item" style="border-bottom:1px solid #ccc; padding:5px 0;">
                      <strong>${coupon.name}</strong> - Discount: ₹${coupon.offerPrice} 
                      ${coupon.validTill ? `, Valid Till: ${new Date(coupon.validTill).toLocaleDateString()}` : ''}
                    </div>`;
        });
      } else {
        html = '<p>No coupons available.</p>';
      }
      document.getElementById('coupon-list').innerHTML = html;
    } catch (error) {
      console.error('Error fetching coupons:', error);
    }
  }

  // Fetch available coupons on page load
  $(document).ready(function() {
    fetchCoupons();
  });
</script>
<%- include("../../views/partials/user/footer") %>

<style>
.btn-sm {
  padding: 0.4rem 0.8rem;
  font-size: 0.875rem;
  transition: all 0.2s ease-in-out;
}

.btn-outline-primary:hover {
  background-color: #0d6efd;
  color: white;
}

.btn-danger:hover {
  background-color: #dc3545;
  opacity: 0.9;
}

.material-icons {
  vertical-align: middle;
  line-height: 1;
}

.gap-2 {
  gap: 0.5rem !important;
}
</style>
<script src="https://checkout.razorpay.com/v1/checkout.js"></script>
